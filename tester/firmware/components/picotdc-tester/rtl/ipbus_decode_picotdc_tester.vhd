-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_picotdc_tester is

  constant IPBUS_SEL_WIDTH: positive := 4;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_picotdc_tester(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Tue May 10 10:52:51 2022 
  constant N_SLV_LEDS: integer := 0;
  constant LEDS_ADDR_WIDTH: integer := 3;
  constant N_SLV_I2C_SILICON: integer := 1;
  constant I2C_SILICON_ADDR_WIDTH: integer := 3;
  constant N_SLV_I2C_VC707: integer := 2;
  constant I2C_VC707_ADDR_WIDTH: integer := 3;
  constant N_SLV_I2C_PICOTDC: integer := 3;
  constant I2C_PICOTDC_ADDR_WIDTH: integer := 3;
  constant N_SLV_GPIO: integer := 4;
  constant GPIO_ADDR_WIDTH: integer := 2;
  constant N_SLV_PICOTDC_READOUT: integer := 5;
  constant PICOTDC_READOUT_ADDR_WIDTH: integer := 3;
  constant N_SLV_PICOTDC_READOUT2: integer := 6;
  constant PICOTDC_READOUT2_ADDR_WIDTH: integer := 3;
  constant N_SLV_PICOTDC_READOUT3: integer := 7;
  constant PICOTDC_READOUT3_ADDR_WIDTH: integer := 3;
  constant N_SLV_PICOTDC_READOUT4: integer := 8;
  constant PICOTDC_READOUT4_ADDR_WIDTH: integer := 3;
  constant N_SLAVES: integer := 9;
-- END automatically generated VHDL

    
end ipbus_decode_picotdc_tester;

package body ipbus_decode_picotdc_tester is

  function ipbus_sel_picotdc_tester(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Tue May 10 10:52:51 2022 
    if    std_match(addr, "------------------------0001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_LEDS, IPBUS_SEL_WIDTH)); -- LEDS / base 0x00000010 / mask 0x000000f0
    elsif std_match(addr, "------------------------0010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_SILICON, IPBUS_SEL_WIDTH)); -- I2C_SILICON / base 0x00000020 / mask 0x000000f0
    elsif std_match(addr, "------------------------0011----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_VC707, IPBUS_SEL_WIDTH)); -- I2C_VC707 / base 0x00000030 / mask 0x000000f0
    elsif std_match(addr, "------------------------0100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_PICOTDC, IPBUS_SEL_WIDTH)); -- I2C_PICOTDC / base 0x00000040 / mask 0x000000f0
    elsif std_match(addr, "------------------------0110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_GPIO, IPBUS_SEL_WIDTH)); -- GPIO / base 0x00000060 / mask 0x000000f0
    elsif std_match(addr, "------------------------1000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_PICOTDC_READOUT, IPBUS_SEL_WIDTH)); -- PICOTDC_READOUT / base 0x00000080 / mask 0x000000f0
    elsif std_match(addr, "------------------------1001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_PICOTDC_READOUT2, IPBUS_SEL_WIDTH)); -- PICOTDC_READOUT2 / base 0x00000090 / mask 0x000000f0
    elsif std_match(addr, "------------------------1010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_PICOTDC_READOUT3, IPBUS_SEL_WIDTH)); -- PICOTDC_READOUT3 / base 0x000000a0 / mask 0x000000f0
    elsif std_match(addr, "------------------------1011----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_PICOTDC_READOUT4, IPBUS_SEL_WIDTH)); -- PICOTDC_READOUT4 / base 0x000000b0 / mask 0x000000f0
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_picotdc_tester;

end ipbus_decode_picotdc_tester;

